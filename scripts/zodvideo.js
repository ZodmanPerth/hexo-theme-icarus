// Adds a video with an optional caption
// Usage:
// {% zodvideo platform id %}
//    content of caption
// {% endzodcaption %}
// Where:
//    platform  = [youtube|vimeo]
//    id        = the id of the video on the platform
//    content   = optional markdown content for the caption
hexo.extend.tag.register('zodvideo', function(args, content) {

  var idArg = args[1]

  var iframeSource = ""
  var platformArg = args[0]
  switch (platformArg) {
    case 'youtube':
      iframeSource = `https://www.youtube.com/embed/${idArg}`
      break
    case 'vimeo':
      iframeSource = `https://player.vimeo.com/video/${idArg}`
      break
  }

  var contentText = hexo.render.renderSync({
    text: content,
    engine: 'markdown'
  }).slice(3, -5);  // slice removes leading <p> and trailing </p>


  // NOTE: 
  //  This is the same content as generated by the nunjucks templates defined by icarus video tags.
  //  It may need updating when upgrading the icarus version.
  var videoIcarusNunjucksContent = 
  `
    <div class="video-container" style="padding-top:0">
      <iframe src="${iframeSource}" frameborder="0" loading="lazy" allowfullscreen></iframe>
    </div>
  `
  var videoHtml = 
  `
    <div class="video-container" style="padding-top:0.49em">
      ${videoIcarusNunjucksContent}
    </div>
  `

  // NOTE: 
  //  This is a copy of the style from zodcaption.js.
  //  I didn't want to create a dependency on a nunjucks renderer engine just to remove the duplicate code.
  var captionHtml = ""
  if (contentText)
    captionHtml = `<p class="has-text-centered is-size-6 caption" style="color: #7a7a7a;padding-top: 6px">${contentText}</p>`


  var output = `${videoHtml}${captionHtml}`
  return output

}, {
  async: true,
  ends: true
})